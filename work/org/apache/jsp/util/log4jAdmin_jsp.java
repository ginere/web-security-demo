/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.21
 * Generated at: 2016-07-26 15:24:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.util;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.apache.log4j.Level;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import java.util.HashMap;
import java.util.Enumeration;
import java.util.Set;
import java.util.Arrays;

public final class log4jAdmin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
 long beginPageLoadTime = System.currentTimeMillis();
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Log4J Administration</title>\r\n");
      out.write("    <style type=\"text/css\">\r\n");
      out.write("\r\n");
      out.write("        <!--\r\n");
      out.write("        #content {\r\n");
      out.write("            margin: 0px;\r\n");
      out.write("\r\n");
      out.write("            padding: 0px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            background-color: #ccc;\r\n");
      out.write("\r\n");
      out.write("            border: 1px solid #000;\r\n");
      out.write("            width: 100%;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        body {\r\n");
      out.write("            position: relative;\r\n");
      out.write("            margin: 10px;\r\n");
      out.write("\r\n");
      out.write("            padding: 0px;\r\n");
      out.write("            color: #333;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        h1 {\r\n");
      out.write("            margin-top: 20px;\r\n");
      out.write("            font: 1.5em Verdana, Arial, Helvetica sans-serif;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        h2 {\r\n");
      out.write("            margin-top: 10px;\r\n");
      out.write("            font: 0.75em Verdana, Arial, Helvetica sans-serif;\r\n");
      out.write("            text-align: left;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        a, a:link, a:visited, a:active {\r\n");
      out.write("            color: red;\r\n");
      out.write("            text-decoration: none;\r\n");
      out.write("            text-transform: uppercase;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        table {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            background-color: #000;\r\n");
      out.write("            padding: 3px;\r\n");
      out.write("            border: 0px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        th {\r\n");
      out.write("            font-size: 0.75em;\r\n");
      out.write("            background-color: #ccc;\r\n");
      out.write("            color: #000;\r\n");
      out.write("            padding-left: 5px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            border: 1px solid #ccc;\r\n");
      out.write("            white-space: nowrap;\r\n");
      out.write("\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        td {\r\n");
      out.write("            font-size: 0.75em;\r\n");
      out.write("            background-color: #fff;\r\n");
      out.write("            white-space: nowrap;\r\n");
      out.write("\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        td.center {\r\n");
      out.write("            font-size: 0.75em;\r\n");
      out.write("            background-color: #fff;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("\r\n");
      out.write("            white-space: nowrap;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .filterForm {\r\n");
      out.write("\r\n");
      out.write("            font-size: 0.9em;\r\n");
      out.write("            background-color: #000;\r\n");
      out.write("            color: #fff;\r\n");
      out.write("            padding-left: 5px;\r\n");
      out.write("            text-align: left;\r\n");
      out.write("            border: 1px solid #000;\r\n");
      out.write("\r\n");
      out.write("            white-space: nowrap;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .filterText {\r\n");
      out.write("\r\n");
      out.write("            font-size: 0.75em;\r\n");
      out.write("            background-color: #fff;\r\n");
      out.write("            color: #000;\r\n");
      out.write("            text-align: left;\r\n");
      out.write("\r\n");
      out.write("            border: 1px solid #ccc;\r\n");
      out.write("            white-space: nowrap;\r\n");
      out.write("\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .filterButton {\r\n");
      out.write("            font-size: 0.75em;\r\n");
      out.write("\r\n");
      out.write("            background-color: #000;\r\n");
      out.write("            color: #fff;\r\n");
      out.write("\r\n");
      out.write("            padding-left: 5px;\r\n");
      out.write("            padding-right: 5px;\r\n");
      out.write("\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            border: 1px solid #ccc;\r\n");
      out.write("\r\n");
      out.write("            width: 100px;\r\n");
      out.write("            white-space: nowrap;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        -->\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body onLoad=\"javascript:document.logFilterForm.logNameFilter.focus();\">\r\n");
      out.write("\r\n");

    String containsFilter = "Contains";
    String beginsWithFilter = "Begins With";

    String[] logLevels = {"debug", "info", "warn", "error", "fatal", "off"};
    String targetOperation = (String) request.getParameter("operation");
    String targetLogger = (String) request.getParameter("logger");
    String targetLogLevel = (String) request.getParameter("newLogLevel");
    String logNameFilter = (String) request.getParameter("logNameFilter");
    String logNameFilterType = (String) request.getParameter("logNameFilterType");


      out.write("\r\n");
      out.write("<div id=\"content\">\r\n");
      out.write("<h1>Log4J Administration</h1>\r\n");
      out.write("\r\n");
      out.write("<div class=\"filterForm\">\r\n");
      out.write("\r\n");
      out.write("    <form action=\"");
      out.print(request.getContextPath());
      out.write("/util/log4jAdmin.jsp\" name=\"logFilterForm\">Filter Loggers:&nbsp;&nbsp;\r\n");
      out.write("        <input name=\"logNameFilter\" type=\"text\" size=\"50\" value=\"");
      out.print((logNameFilter == null ? "":logNameFilter));
      out.write("\"\r\n");
      out.write("\r\n");
      out.write("               class=\"filterText\"/>\r\n");
      out.write("        <input name=\"logNameFilterType\" type=\"submit\" value=\"");
      out.print(beginsWithFilter);
      out.write("\" class=\"filterButton\"/>&nbsp;\r\n");
      out.write("\r\n");
      out.write("        <input name=\"logNameFilterType\" type=\"submit\" value=\"");
      out.print(containsFilter);
      out.write("\" class=\"filterButton\"/>&nbsp;\r\n");
      out.write("\r\n");
      out.write("        <input name=\"logNameClear\" type=\"button\" value=\"Clear\" class=\"filterButton\"\r\n");
      out.write("\r\n");
      out.write("               onmousedown='javascript:document.logFilterForm.logNameFilter.value=\"\";'/>\r\n");
      out.write("        <input name=\"logNameReset\" type=\"reset\" value=\"Reset\" class=\"filterButton\"/>\r\n");
      out.write("\r\n");
      out.write("        <param name=\"operation\" value=\"changeLogLevel\"/>\r\n");
      out.write("    </form>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<table cellspacing=\"1\">\r\n");
      out.write("    <tr>\r\n");
      out.write("        <th width=\"25%\">Logger</th>\r\n");
      out.write("\r\n");
      out.write("        <th width=\"25%\">Parent Logger</th>\r\n");
      out.write("        <th width=\"15%\">Effective Level</th>\r\n");
      out.write("\r\n");
      out.write("        <th width=\"35%\">Change Log Level To</th>\r\n");
      out.write("    </tr>\r\n");
      out.write("\r\n");
      out.write("    ");

        Enumeration loggers = LogManager.getCurrentLoggers();

        HashMap loggersMap = new HashMap(128);
        Logger rootLogger = LogManager.getRootLogger();

        if (!loggersMap.containsKey(rootLogger.getName())) {

            loggersMap.put(rootLogger.getName(), rootLogger);
        }

        while (loggers.hasMoreElements()) {
            Logger logger = (Logger) loggers.nextElement();

            if (logNameFilter == null || logNameFilter.trim().length() == 0) {

                loggersMap.put(logger.getName(), logger);
            } else if (containsFilter.equals(logNameFilterType)) {

                if (logger.getName().toUpperCase().indexOf(logNameFilter.toUpperCase()) >= 0) {

                    loggersMap.put(logger.getName(), logger);
                }

            } else {
// Either was no filter in IF, contains filter in ELSE IF, or begins with in ELSE
                if (logger.getName().startsWith(logNameFilter)) {

                    loggersMap.put(logger.getName(), logger);
                }

            }
        }
        Set loggerKeys = loggersMap.keySet();

        String[] keys = new String[loggerKeys.size()];

        keys = (String[]) loggerKeys.toArray(keys);

        Arrays.sort(keys, String.CASE_INSENSITIVE_ORDER);
        for (int i = 0; i < keys.length; i++) {

            Logger logger = (Logger) loggersMap.get(keys[i]);

// MUST CHANGE THE LOG LEVEL ON LOGGER BEFORE GENERATING THE LINKS AND THE
// CURRENT LOG LEVEL OR DISABLED LINK WON'T MATCH THE NEWLY CHANGED VALUES
            if ("changeLogLevel".equals(targetOperation) && targetLogger.equals(logger.getName())) {

                Logger selectedLogger = (Logger) loggersMap.get(targetLogger);

                selectedLogger.setLevel(Level.toLevel(targetLogLevel));
            }

            String loggerName = null;
            String loggerEffectiveLevel = null;
            String loggerParent = null;
            if (logger != null) {
                loggerName = logger.getName();
                loggerEffectiveLevel = String.valueOf(logger.getEffectiveLevel());
                loggerParent = (logger.getParent() == null ? null : logger.getParent().getName());

            }
    
      out.write("\r\n");
      out.write("    <tr>\r\n");
      out.write("        <td>");
      out.print(loggerName);
      out.write("\r\n");
      out.write("        </td>\r\n");
      out.write("\r\n");
      out.write("        <td>");
      out.print(loggerParent);
      out.write("\r\n");
      out.write("        </td>\r\n");
      out.write("        <td>");
      out.print(loggerEffectiveLevel);
      out.write("\r\n");
      out.write("\r\n");
      out.write("        </td>\r\n");
      out.write("        <td class=\"center\">\r\n");
      out.write("            ");

                for (int cnt = 0; cnt < logLevels.length; cnt++) {

                    String url = request.getContextPath()+"/util/log4jAdmin.jsp?operation=changeLogLevel&logger=" + loggerName + "&newLogLevel=" + logLevels[cnt] + "&logNameFilter=" + (logNameFilter != null ? logNameFilter : "") + "&logNameFilterType=" + (logNameFilterType != null ? logNameFilterType : "");

                    if (logger.getLevel() == Level.toLevel(logLevels[cnt]) || logger.getEffectiveLevel() == Level.toLevel(logLevels[cnt])) {

            
      out.write("\r\n");
      out.write("            [");
      out.print(logLevels[cnt].toUpperCase());
      out.write("]\r\n");
      out.write("\r\n");
      out.write("            ");

            } else {
            
      out.write("\r\n");
      out.write("            <a href='");
      out.print(url);
      out.write('\'');
      out.write('>');
      out.write('[');
      out.print(logLevels[cnt]);
      out.write("]</a>&nbsp;\r\n");
      out.write("\r\n");
      out.write("            ");

                    }
                }
            
      out.write("\r\n");
      out.write("        </td>\r\n");
      out.write("    </tr>\r\n");
      out.write("\r\n");
      out.write("    ");

        }
    
      out.write("\r\n");
      out.write("</table>\r\n");
      out.write("<h2>\r\n");
      out.write("    Revision: 1.0<br/>\r\n");
      out.write("    Page Load Time (Millis): ");
      out.print((System.currentTimeMillis() - beginPageLoadTime));
      out.write("\r\n");
      out.write("</h2>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html> ");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
